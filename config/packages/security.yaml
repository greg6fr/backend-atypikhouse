# config/packages/security.yaml
security:
  # Enable password hashers
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"

  # Define providers
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email

  # Set up the firewalls
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    # JWT authentication
    auth:
      pattern: ^/api/auth
      stateless: true
      provider: app_user_provider

      # Endpoint for obtaining JWT tokens
      json_login:
        check_path: /api/auth/login
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    # Main API firewall
    api:
      pattern: ^/api
      stateless: true
      provider: app_user_provider
      jwt: ~

    # Main area (for potential admin panel)
    main:
      lazy: true
      provider: app_user_provider
      custom_authenticator: App\Security\UserAuthenticator
      logout:
        path: app_logout
        target: app_home
      remember_me:
        secret: "%kernel.secret%"
        lifetime: 604800 # 1 week

  # Easy way to control access for large sections of your site
  access_control:
    # Auth endpoints are public
    - { path: ^/api/auth/login, roles: PUBLIC_ACCESS }
    - { path: ^/api/auth/register/tenant, roles: PUBLIC_ACCESS }
    - { path: ^/api/auth/register/owner, roles: PUBLIC_ACCESS }
    - { path: ^/api/auth/refresh-token, roles: PUBLIC_ACCESS }

    # Public endpoints
    - { path: ^/api/properties$, methods: [GET], roles: PUBLIC_ACCESS }
    - { path: ^/api/properties/\d+$, methods: [GET], roles: PUBLIC_ACCESS }
    - { path: ^/api/property-types$, methods: [GET], roles: PUBLIC_ACCESS }
    - { path: ^/api/amenities$, methods: [GET], roles: PUBLIC_ACCESS }

    # Secured endpoints
    - {
        path: ^/api/properties,
        methods: [POST, PUT, DELETE],
        roles: ROLE_OWNER,
      }
    - { path: ^/api/bookings, roles: ROLE_USER }
    - { path: ^/api/users/\d+, roles: ROLE_USER }
    - { path: ^/api/messages, roles: ROLE_USER }
    - { path: ^/api/reviews, roles: ROLE_USER }

    # Admin area
    - { path: ^/api/admin, roles: ROLE_ADMIN }
    - { path: ^/admin, roles: ROLE_ADMIN }

  # Define role hierarchy
  role_hierarchy:
    ROLE_OWNER: ROLE_USER
    ROLE_ADMIN: [ROLE_USER, ROLE_OWNER]

when@test:
  security:
    password_hashers:
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4
        time_cost: 3
        memory_cost: 10
